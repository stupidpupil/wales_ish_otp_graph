'on':
  workflow_dispatch: ~
  schedule:
  - cron: 25 5 * * 1
name: pfaedle-stats-test
jobs:
  build_pfaedle:
    runs-on: macOS-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
      with:
        repository: stupidpupil/pfaedle
        submodules: yes
        path: pfaedle
        ref: macos-patches
    - name: Get pfaedle ref
      id: pfaedle-ref
      run: |
        echo "::set-output name=ref::$(git -C pfaedle rev-parse HEAD)"
      shell: bash
    - name: Cache pfaedle-build
      id: cache_pfaedle_build
      uses: actions/cache@v2
      with:
        path: |
          pfaedle-build
        key: ${{ runner.os }}-${{ steps.pfaedle-ref.outputs.ref }}-v3
    - name: Build pfaedle
      if: steps.cache_pfaedle_build.outputs.cache-hit != 'true'
      run: |
        cd pfaedle
        mkdir build
        cd build
        cmake ..
        make -j
        make install DESTDIR="../../pfaedle-build"
        cd ../../
        chmod -R ug+rw pfaedle-build/
      shell: bash
    - name: Upload pfaedle artefact
      uses: actions/upload-artifact@v2
      with:
        name: pfaedle
        path: pfaedle-build
        if-no-files-found: error
  download_and_prepare_osm:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
    - name: Write config.yml
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ${{ github.workspace }}/config.yml
        contents: |
          default:
            atoc_username: !expr Sys.getenv("ATOC_USERNAME")
            atoc_password: !expr Sys.getenv("ATOC_PASSWORD")
            tnds_username: !expr Sys.getenv("TNDS_USERNAME")
            tnds_password: !expr Sys.getenv("TNDS_PASSWORD")
            output_affix: !expr Sys.getenv("OUTPUT_AFFIX")
            bounds: !expr Sys.getenv("BOUNDS")
    - name: Get Geofabrik ETag
      id: geofabrik_etag
      run: |
        echo "::set-output name=etag::$(curl -I "https://download.geofabrik.de/europe/great-britain-latest.osm.pbf" | grep "ETag")"
    - name: Cache OSM
      id: cache_osm
      uses: actions/cache@v2
      with:
        path: |
          output/openstreetmap/*
        key: ${{ steps.geofabrik_etag.outputs.etag }}-${{ hashFiles('config.yml')
          }}-osm-v1
    - uses: r-lib/actions/setup-r@v2
      if: steps.cache_osm.outputs.cache-hit != 'true'
    - uses: r-lib/actions/setup-pandoc@v1
      if: steps.cache_osm.outputs.cache-hit != 'true'
    - name: Query dependencies
      run: |
        install.packages('remotes')
        saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
      shell: Rscript {0}
      if: steps.cache_osm.outputs.cache-hit != 'true'
    - name: Restore R package cache
      uses: actions/cache@v2
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds')
          }}
        restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
      if: steps.cache_osm.outputs.cache-hit != 'true'
    - name: Install dependencies
      run: |
        install.packages(c("devtools"))
        devtools::install_deps(dependencies = TRUE)
      shell: Rscript {0}
      if: steps.cache_osm.outputs.cache-hit != 'true'
    - name: Install osmium
      run: brew install osmium-tool
      if: steps.cache_osm.outputs.cache-hit != 'true'
    - name: Download and prepare OSM
      if: steps.cache_osm.outputs.cache-hit != 'true'
      run: |
        devtools::load_all()
        download_and_prepare_osm()
      shell: Rscript {0}
    - name: Upload OpenStreetMap artifact
      uses: actions/upload-artifact@v2
      with:
        name: openstreetmap
        path: output/openstreetmap/*
        if-no-files-found: error
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      ATOC_USERNAME: ${{ secrets.ATOC_USERNAME }}
      ATOC_PASSWORD: ${{ secrets.ATOC_PASSWORD }}
      TNDS_USERNAME: ${{ secrets.TNDS_USERNAME }}
      TNDS_PASSWORD: ${{ secrets.TNDS_PASSWORD }}
      BOUNDS: ${{ secrets.BOUNDS }}
      OUTPUT_AFFIX: ${{ secrets.OUTPUT_AFFIX }}
  download_and_prepare_atoc:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
    - name: Write config.yml
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ${{ github.workspace }}/config.yml
        contents: |
          default:
            atoc_username: !expr Sys.getenv("ATOC_USERNAME")
            atoc_password: !expr Sys.getenv("ATOC_PASSWORD")
            tnds_username: !expr Sys.getenv("TNDS_USERNAME")
            tnds_password: !expr Sys.getenv("TNDS_PASSWORD")
            output_affix: !expr Sys.getenv("OUTPUT_AFFIX")
            bounds: !expr Sys.getenv("BOUNDS")
    - uses: r-lib/actions/setup-r@v2
    - uses: r-lib/actions/setup-pandoc@v1
    - name: Query dependencies
      run: |
        install.packages('remotes')
        saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
      shell: Rscript {0}
    - name: Restore R package cache
      uses: actions/cache@v2
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds')
          }}
        restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
    - name: Install dependencies
      run: |
        install.packages(c("devtools"))
        devtools::install_deps(dependencies = TRUE)
      shell: Rscript {0}
    - name: Get ATOC URL
      id: atoc_url
      run: |
        devtools::load_all()
        cat(paste0("::set-output name=url::", get_atoc_download_url(),"\n"))
      shell: Rscript {0}
    - name: Cache ATOC
      id: cache_atoc
      uses: actions/cache@v2
      with:
        path: |
          output/gtfs/atoc.*.gtfs.zip*
        key: ${{ steps.atoc_url.outputs.url }}-${{ hashFiles('config.yml') }}-atoc.gtfs-v1
    - name: Download and prepare ATOC GTFS
      if: steps.cache_atoc.outputs.cache-hit != 'true'
      run: |
        devtools::load_all()
        download_atoc()
        prepare_atoc_gtfs()
      shell: Rscript {0}
    - name: Upload ATOC GTFS artifact
      uses: actions/upload-artifact@v2
      with:
        name: atoc.gtfs.zip
        path: output/gtfs/atoc.*.gtfs.zip*
        if-no-files-found: error
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      ATOC_USERNAME: ${{ secrets.ATOC_USERNAME }}
      ATOC_PASSWORD: ${{ secrets.ATOC_PASSWORD }}
      TNDS_USERNAME: ${{ secrets.TNDS_USERNAME }}
      TNDS_PASSWORD: ${{ secrets.TNDS_PASSWORD }}
      BOUNDS: ${{ secrets.BOUNDS }}
      OUTPUT_AFFIX: ${{ secrets.OUTPUT_AFFIX }}
  download_and_prepare_tnds:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
    - name: Write config.yml
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ${{ github.workspace }}/config.yml
        contents: |
          default:
            atoc_username: !expr Sys.getenv("ATOC_USERNAME")
            atoc_password: !expr Sys.getenv("ATOC_PASSWORD")
            tnds_username: !expr Sys.getenv("TNDS_USERNAME")
            tnds_password: !expr Sys.getenv("TNDS_PASSWORD")
            output_affix: !expr Sys.getenv("OUTPUT_AFFIX")
            bounds: !expr Sys.getenv("BOUNDS")
    - name: Get TNDS directory listing hash
      id: tnds_dir_list_hash
      run: |
        echo "::set-output name=hash::$(
          curl -s ftp://$TNDS_USERNAME:$TNDS_PASSWORD@ftp.tnds.basemap.co.uk | sort | shasum -a 1
        )"
    - name: Cache TNDS
      id: cache_tnds
      uses: actions/cache@v2
      with:
        path: |
          output/gtfs/*.tnds.*.gtfs.zip*
        key: ${{ steps.tnds_dir_list_hash.outputs.hash }}-${{ hashFiles('config.yml')
          }}-tnds.gtfs-v1
    - uses: r-lib/actions/setup-r@v2
      if: steps.cache_tnds.outputs.cache-hit != 'true'
    - uses: r-lib/actions/setup-pandoc@v1
      if: steps.cache_tnds.outputs.cache-hit != 'true'
    - name: Query dependencies
      run: |
        install.packages('remotes')
        saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
      shell: Rscript {0}
      if: steps.cache_tnds.outputs.cache-hit != 'true'
    - name: Restore R package cache
      uses: actions/cache@v2
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds')
          }}
        restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
      if: steps.cache_tnds.outputs.cache-hit != 'true'
    - name: Install dependencies
      run: |
        install.packages(c("devtools"))
        devtools::install_deps(dependencies = TRUE)
      shell: Rscript {0}
      if: steps.cache_tnds.outputs.cache-hit != 'true'
    - name: Download and prepare TNDS GTFS
      if: steps.cache_tnds.outputs.cache-hit != 'true'
      run: |
        devtools::load_all()
        download_tnds()
        prepare_tnds_gtfs()
      shell: Rscript {0}
    - name: Upload TNDS GTFS artifact
      uses: actions/upload-artifact@v2
      with:
        name: tnds.gtfs.zip
        path: output/gtfs/*.tnds.*.gtfs.zip*
        if-no-files-found: error
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      ATOC_USERNAME: ${{ secrets.ATOC_USERNAME }}
      ATOC_PASSWORD: ${{ secrets.ATOC_PASSWORD }}
      TNDS_USERNAME: ${{ secrets.TNDS_USERNAME }}
      TNDS_PASSWORD: ${{ secrets.TNDS_PASSWORD }}
      BOUNDS: ${{ secrets.BOUNDS }}
      OUTPUT_AFFIX: ${{ secrets.OUTPUT_AFFIX }}
  download_and_prepare_bods:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
    - name: Write config.yml
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ${{ github.workspace }}/config.yml
        contents: |
          default:
            atoc_username: !expr Sys.getenv("ATOC_USERNAME")
            atoc_password: !expr Sys.getenv("ATOC_PASSWORD")
            tnds_username: !expr Sys.getenv("TNDS_USERNAME")
            tnds_password: !expr Sys.getenv("TNDS_PASSWORD")
            output_affix: !expr Sys.getenv("OUTPUT_AFFIX")
            bounds: !expr Sys.getenv("BOUNDS")
    - name: Get BODS index page hash
      id: bods_index_page_hash
      run: |
        echo "::set-output name=hash::$(curl "https://data.bus-data.dft.gov.uk/timetable/download/" | md5)"
    - name: Cache BODS
      id: cache_bods
      uses: actions/cache@v2
      with:
        path: output/gtfs/*.bods.*.gtfs.zip*
        key: ${{ steps.bods_index_page_hash.outputs.hash }}-${{ hashFiles('config.yml')
          }}-bods.gtfs-v1
    - uses: r-lib/actions/setup-r@v2
      if: steps.cache_bods.outputs.cache-hit != 'true'
    - uses: r-lib/actions/setup-pandoc@v1
      if: steps.cache_bods.outputs.cache-hit != 'true'
    - name: Query dependencies
      run: |
        install.packages('remotes')
        saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
      shell: Rscript {0}
      if: steps.cache_bods.outputs.cache-hit != 'true'
    - name: Restore R package cache
      uses: actions/cache@v2
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds')
          }}
        restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
      if: steps.cache_bods.outputs.cache-hit != 'true'
    - name: Install dependencies
      run: |
        install.packages(c("devtools"))
        devtools::install_deps(dependencies = TRUE)
      shell: Rscript {0}
      if: steps.cache_bods.outputs.cache-hit != 'true'
    - name: Download and prepare BODS GTFS
      if: steps.cache_bods.outputs.cache-hit != 'true'
      run: |
        devtools::load_all()
        download_and_prepare_bods_gtfs()
      shell: Rscript {0}
    - name: Upload BODS GTFS artifact
      uses: actions/upload-artifact@v2
      with:
        name: bods.gtfs.zip
        path: output/gtfs/*.bods.*.gtfs.zip*
        if-no-files-found: error
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      ATOC_USERNAME: ${{ secrets.ATOC_USERNAME }}
      ATOC_PASSWORD: ${{ secrets.ATOC_PASSWORD }}
      TNDS_USERNAME: ${{ secrets.TNDS_USERNAME }}
      TNDS_PASSWORD: ${{ secrets.TNDS_PASSWORD }}
      BOUNDS: ${{ secrets.BOUNDS }}
      OUTPUT_AFFIX: ${{ secrets.OUTPUT_AFFIX }}
  merge_and_pfaedle_gtfs:
    needs:
    - download_and_prepare_atoc
    - download_and_prepare_tnds
    - download_and_prepare_bods
    - download_and_prepare_osm
    - build_pfaedle
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2
    - name: Write config.yml
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ${{ github.workspace }}/config.yml
        contents: |
          default:
            atoc_username: !expr Sys.getenv("ATOC_USERNAME")
            atoc_password: !expr Sys.getenv("ATOC_PASSWORD")
            tnds_username: !expr Sys.getenv("TNDS_USERNAME")
            tnds_password: !expr Sys.getenv("TNDS_PASSWORD")
            output_affix: !expr Sys.getenv("OUTPUT_AFFIX")
            bounds: !expr Sys.getenv("BOUNDS")
    - name: Download ATOC GTFS artifact
      uses: actions/download-artifact@v2
      with:
        name: atoc.gtfs.zip
        path: output/gtfs
    - name: Download TNDS GTFS artifact
      uses: actions/download-artifact@v2
      with:
        name: tnds.gtfs.zip
        path: output/gtfs
    - name: Download BODS GTFS artifact
      uses: actions/download-artifact@v2
      with:
        name: bods.gtfs.zip
        path: output/gtfs
    - name: Download OpenStreetMap artifact
      uses: actions/download-artifact@v2
      with:
        name: openstreetmap
        path: output/openstreetmap/
    - name: Derive hash from ParochialCacheKeys
      id: parochial_cache_keys
      run: |-
        echo "::set-output name=hash::$(
          ls output/*/*.meta.json output/*.meta.json | sort | xargs  jq \".ParochialCacheKey\" | shasum -a 1
        )"
    - name: Cache Merged GTFS
      id: cache_merged_gtfs
      uses: actions/cache@v2
      with:
        path: |
          output/gtfs/merged.*.gtfs.zip*
        key: ${{ hashFiles('config.yml') }}-${{ steps.parochial_cache_keys.outputs.hash
          }}-merged.gtfs-nocache
    - uses: r-lib/actions/setup-r@v2
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - uses: r-lib/actions/setup-pandoc@v1
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - name: Query dependencies
      run: |
        install.packages('remotes')
        saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
      shell: Rscript {0}
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - name: Restore R package cache
      uses: actions/cache@v2
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds')
          }}
        restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - name: Install dependencies
      run: |
        install.packages(c("devtools"))
        devtools::install_deps(dependencies = TRUE)
      shell: Rscript {0}
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - name: Install osmium
      run: brew install osmium-tool
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - name: Download pfaedle artifact
      uses: actions/download-artifact@v2
      with:
        name: pfaedle
        path: pfaedle-build
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - name: Make pfaedle executable
      run: |
        chmod ug+x $GITHUB_WORKSPACE/pfaedle-build/usr/local/bin/*
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - name: Add pfaedle to path
      run: echo "$GITHUB_WORKSPACE/pfaedle-build/usr/local/bin" >> $GITHUB_PATH
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - uses: actions/setup-go@v3
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - name: Get gtfstidy
      run: go install github.com/patrickbr/gtfstidy@latest
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
    - name: Merge and Pfaedle Merged GTFS
      if: steps.cache_merged_gtfs.outputs.cache-hit != 'true'
      run: |
        devtools::load_all()
        prepare_merged_gtfs(should_pfaedle = TRUE)
      shell: Rscript {0}
    - name: Upload Merged GTFS artifact
      uses: actions/upload-artifact@v2
      with:
        name: merged.gtfs.zip
        path: output/gtfs/merged.*.gtfs.zip*
        if-no-files-found: error
    - name: Upload Pfaedle stats.json
      uses: actions/upload-artifact@v2
      with:
        name: stats.json
        path: stats.json
        if-no-files-found: error
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      ATOC_USERNAME: ${{ secrets.ATOC_USERNAME }}
      ATOC_PASSWORD: ${{ secrets.ATOC_PASSWORD }}
      TNDS_USERNAME: ${{ secrets.TNDS_USERNAME }}
      TNDS_PASSWORD: ${{ secrets.TNDS_PASSWORD }}
      BOUNDS: ${{ secrets.BOUNDS }}
      OUTPUT_AFFIX: ${{ secrets.OUTPUT_AFFIX }}
